// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// User management (Supabase Auth)
model Profile {
    id             String   @id @db.Uuid
    email          String   @unique
    full_name      String?
    avatar_url     String?
    is_super_admin Boolean  @default(false)
    created_at     DateTime @default(now())
    updated_at     DateTime @updatedAt

    // Relations
    memberships Membership[]

    @@map("profiles")
}

// Multi-tenant structure
model Tenant {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name       String
    slug       String   @unique
    domain     String?  @unique
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    // Relations
    memberships Membership[]
    invoices    Invoice[]

    @@map("tenants")
}

// User-Tenant relationship
model Membership {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user_id    String   @db.Uuid
    tenant_id  String   @db.Uuid
    role       String   @default("member") // member, admin, owner
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    // Relations
    user   Profile @relation(fields: [user_id], references: [id], onDelete: Cascade)
    tenant Tenant  @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

    @@unique([user_id, tenant_id])
    @@map("memberships")
}

// Invoices
model Invoice {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    tenant_id  String   @db.Uuid
    number     String
    amount     Decimal  @db.Decimal(12, 2)
    status     String   @default("pending")
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    // Relations
    tenant Tenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

    @@map("invoices")
}

// Audit logs
model AuditLog {
    id          BigInt   @id @default(autoincrement())
    at          DateTime @default(now())
    actor       String?  @db.Uuid
    action      String
    target_type String?
    target_id   String?
    metadata    Json?

    @@map("audit_logs")
}
