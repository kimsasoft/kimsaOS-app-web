// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// User management (Supabase Auth)
model Profile {
  id             String   @id
  email          String   @unique
  full_name      String?
  avatar_url     String?
  is_super_admin Boolean  @default(false)
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  updated_at     DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  memberships  Membership[]
  audit_logs   AuditLog[]

  @@map("profiles")
}

// Company information
model Company {
  id         String   @id @default(cuid())
  name       String
  email      String?
  phone      String?
  address    String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  tenants    Tenant[]

  @@map("companies")
}

// Multi-tenant structure
model Tenant {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  status       String   @default("active")
  company_id   String
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)
  
  // Relations
  company      Company    @relation(fields: [company_id], references: [id])
  memberships  Membership[]
  orders       Order[]
  audit_logs   AuditLog[]

  @@map("tenants")
}

// User-Tenant relationship
model Membership {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user_id    String   @db.Uuid
    tenant_id  String   @db.Uuid
    role       String   @default("member") // member, admin, owner
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    // Relations
    user   Profile @relation(fields: [user_id], references: [id], onDelete: Cascade)
    tenant Tenant  @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

    @@unique([user_id, tenant_id])
    @@map("memberships")
}

// Invoices
model Order {
  id          String   @id @default(cuid())
  number      String
  status      String   @default("draft")
  total       Decimal  @db.Decimal(10,2)
  tenant_id   String
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  tenant      Tenant   @relation(fields: [tenant_id], references: [id])

  @@map("orders")
}

// Audit logs
model AuditLog {
  id         String   @id @default(cuid())
  action     String
  table_name String?
  record_id  String?
  old_values Json?
  new_values Json?
  user_id    String?
  tenant_id  String?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  user       Profile? @relation(fields: [user_id], references: [id])
  tenant     Tenant?  @relation(fields: [tenant_id], references: [id])

  @@map("audit_logs")
}
